:ruby
  # Based on /niir page without the admin actions
  not_batch_mark_review = %w(all reviewed).include?(params[:filter] )
  product_ids = @scraper_page_imports.collect(&:spree_product_id)
  @product_ids_to_master_ids ||= ::Spree::Variant.where(product_id: product_ids, is_master: true).collect(&:id)


- content_for :head do
  = stylesheet_link_tag 'spree/record_reviews'
  :css
    .separator-list-item { padding: 0.5rem 0.5rem 0.5rem 1.0rem; margin-left: -0.5rem; background-color: #f6f6f6; }
    .pagination span { font-size: 14px; line-height: 34px; margin: 0 3px; }
    input[class=product-selection-checkbox] { display: none; }
    input[type=checkbox]:not(:checked) + div { opacity: 0.5; }
    input[type=checkbox]:not(:checked) + div + div { opacity: 0.5; }
    input[type=checkbox]:not(:checked) + div + div + div { opacity: 0.5; }
    input[type=checkbox]:checked + div { opacity: 1.0; }
    input[type=checkbox]:checked + div + div { opacity: 1.0; }
    input[type=checkbox]:checked + div + div + div { opacity: 1.0; }
    .product-thumbnails input[type=radio] { display: none; }
    .text-highlight { background-color: #FFEE99; padding: 0.2rem; margin: -0.2rem 0 0 -0.2rem; }

  = javascript_include_tag 'spree/record_reviews'

  :javascript
    var productsPreviousImagesChecked = {};

    function clickedProductMainImage(event) {
      var productId = $(this).attr('data-product-id');
      var rowCheckboxSelector = "input[name='product_selection[" + productId +"]']";
      var inputName = $(this).prop('name');
      var currentSelectedValue = productsPreviousImagesChecked[inputName];

      //console.log( $(this).prop('name') + ", id = " + $(this).prop('id') + " val = " + $(this).val() +", vs current "+ currentSelectedValue );
      $(this).siblings("label").removeClass('main-image');
      if ( $(this).val() != currentSelectedValue ) { 
        $("label[for='" + $(this).prop('id') + "']").addClass('main-image');
        currentSelectedValue = $(this).val();
        $('#' + $(this).prop('id'))[0].checked = true;
      } else {
        $("label[for='" + $(this).prop('id') + "']").removeClass('main-image');
        currentSelectedValue = '0';
        $("input[name='"+ inputName +"'")[0].checked = true;
      }
      productsPreviousImagesChecked[inputName] = currentSelectedValue;
      $(rowCheckboxSelector).prop('checked', ( currentSelectedValue != '0') );
    }

    $(function(){
      $("input[class='product-main-image']").click(clickedProductMainImage);
    });


- admin_breadcrumb do
  %span(class="badge badge-info#{' badge-active' if params[:filter]=='all'}")
    = link_to 'All', admin_imported_products_path(params.merge(controller: nil, action: nil, last_product_id: nil, filter: 'all', page: 1, order:''))
  %span(class="badge badge-success#{' badge-active' if params[:filter]=='reviewed'}")
    = link_to admin_imported_products_path(params.merge(controller: nil, action: nil, last_product_id: nil, filter: 'reviewed', page: 1, order:'')) do
      - if @total_count_of_reviewed
        #{@total_count_of_reviewed}
      Reviewed
  %span(class="badge badge-warning#{' badge-active' if params[:filter].blank? || params[:filter]=='not_reviewed'}")
    = link_to admin_imported_products_path(params.merge(controller: nil, action: nil, last_product_id: nil, filter: 'not_reviewed', page: 1, order:'')) do
      - if @total_count_of_not_reviewed
        #{@total_count_of_not_reviewed}
      Not Reviewed

.row
  .col-sm-8
    = render_admin_breadcrumbs
  .col-sm-4
    = form_tag(admin_imported_products_path, method:'get', id:'sort_reviews_form') do
      = hidden_field_tag('limit', params[:limit]) if params[:limit]
      %label Sort By
      = select_tag 'sort', options_for_select([ ['ID Asc', 'scraper_page_id asc'], ['Title Asc', "#{Spree::Product.table_name}.name asc"] ], params[:sort] ), onchange:"this.form.submit()"

%br/
= form_tag(admin_select_scraper_page_imports_path, method:'put', id:'mark_reviewed_form') do
  = hidden_field_tag('limit', params[:limit]) if params[:limit]
  %ul(id="record_reviews" class="products-list list-unstyled")
    - last_scraper_scraper_import_run_id = 0
    - @scraper_page_imports.each do|import|
      - product = import.product
      - next if product.nil?
      - if last_scraper_scraper_import_run_id != import.scraper_import_run_id && import.import_run
        - last_scraper_scraper_import_run_id = import.scraper_import_run_id
        %li(class='separator-list-item' id="scraper_import_run_separator_#{import.scraper_import_run_id}")
          %h3
            = link_to import.import_run.name, '', title:"Created on #{import.import_run.created_at}"
            - if import.import_run.keywords.present?
              %span.badge.badge-info(title='Keywords') #{import.import_run.keywords}
      %li(class="border-top record-review" id="product_card_#{product.id}" data-import="#{import.id}")
        = check_box_tag("product_selection[#{product.id}]", '1', !product.last_review_at.nil?, class:'product-selection-checkbox')
        .row
          .col-md-8.col-sm-10.product-title
            %h4
              = link_to edit_admin_product_path(product), target:'_blank' do
                = highlight_keywords( product.try(:name).to_s )
          .col-md-4.col-sm-2.text-center
            - if import.scraper_page.try(:page_url).present?
              - uri = URI(import.scraper_page.abs_page_url)
              = link_to import.scraper_page.abs_page_url, target:'_blank', 'data-toggle'=>'popover', 'data-trigger'=>'hover', 'data-container'=>'body', 'data-content'=> import.scraper_page.relative_page_url, title:"Go to page on #{uri.host}" do
                %i.fas.fa-external-link-alt 
        .product-info-labels
          %span.product-id-label(data-toggle='tooltip' title="Created at #{product.created_at.to_s(:db)}")= product.id
          - product.categories.each do|cat_taxon|
            %span.category-breadcrumb-label= cat_taxon.collect(&:name).join(' > ')
          %span.price-label= product.display_price.to_html
        .product-thumbnails{id: "product_thumbnails_#{product.id}"}
          = radio_button_tag("product_main_image[#{product.id}]", 0, true, 'data-product-id' => product.id)
          - product.images.each_with_index do|image, image_index|
            = radio_button_tag("product_main_image[#{product.id}]", image.id, false, class:"product-main-image", 'data-product-id' => product.id)
            %label(for="product_main_image_#{product.id}_#{image.id}" class="#{' main-image' if !product.last_review_at.nil? && image_index==0}")
              = image_tag(main_app.url_for(image.url(:small)), id:"variant_thumbnail_#{image.id}", class:"product-thumbnail",  'data-toggle'=>'popover',  'data-img'=> "#{ main_app.url_for(image.url(:large)) }" )
  .container
    .row.text-center
      - if not_batch_mark_review
        = paginate(@scraper_page_imports)
      - else
        %a(name='mark_next_button')
        = submit_tag('Next', class:'btn btn-lg btn-primary', disable_with:'Next ..')      
%br/
%br/